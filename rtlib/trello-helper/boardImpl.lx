
// 对 看板类进行 实现
auto TrelloBoard {

    // python 库 trello 的board 引用
    _py_board;
    // 是否对列表进行了初始化 ？
    _init_list = false;

    // 使用 trello 库更新当前看板的信息
    updateSelf => (){
        name = _py_board.get("name").toStr();
        id = _py_board.get("id").toStr();
        description = _py_board.get("description").toStr();
    }

    updateList => (){
        // 更新列表
        local pyFuncList;
        pyFuncList = _py_board.get("list_lists");
        allList = pyFuncList.callMethod();

        listList = new List();
        for ( i = 0; i < allList.size(); i++){
            l = new TrelloList();
            l._py_list = allList.get(i);
            l.updateSelf();
            l.board = this;

            listList.add(l);
        }

        println("update list over, size: " + listList.size());
    }

    //
    getListByName => ( name ) {
      return filterList( (list, arg) => { return list.name == arg; }, name);
    }

    //
    getListById => ( id ) {
      return filterList( (list, arg) => { return list.id == arg; }, id);
    }

    // 过滤列表
    filterList => ( filter,arg ) {

        if ( ! _init_list ) {
            _init_list = true;
            updateList();
        }

        local tmp ;

        for( i = 0; i < listList.size(); i++){
            tmp = listList.get(i);

            if( filter(tmp, arg) ) {
                return tmp;
            }
        }

        return null;
    }


    initLabelList => (){
        local allList, l;
        allList = _py_board.get("get_labels").callMethod();

        labelList = new List();
        for ( i = 0; i < allList.size(); i++){
            l = new TrelloLabel();
            l._py_label = allList.get(i);
            l.updateSelf();

            // println("got label: " + l );
            labelList.add(l);
        }
    }

    getLabelByName => (name) {
        return filterLabel( (l,arg) => { return l.name == arg; } ,name);
    }

    getLabelByColor => (color) {
        return filterLabel( (l,arg) => { return l.color == arg; } ,color);
    }

    filterLabel => (filter, arg){
        if(!filter){
            return null;
        }

        local l;
        for(i = 0; i < labelList.size(); i++){
            l = labelList.get(i);

            if(filter(l, arg)){
                return l;
            }
        }
    }


    initCustomFieldList => (){
        local allList, l;
        allList = _py_board.get("get_custom_field_definitions").callMethod();

        customFieldList = new List();
        for(i = 0; i < allList.size(); i++){
            l = new TrelloCustomField();
            l._py_customField = allList.get(i);
            l.updateSelf();

            customFieldList.add(l);
        }

    }

}
