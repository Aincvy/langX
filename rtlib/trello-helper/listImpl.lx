
// 对 list 类进行实现
auto TrelloList {

    // 列表的python 对象
    _py_list;

    _init_card = false;

    // 更新当前的列表的属性
    updateSelf => (){
        name = _py_list.get("name").toStr();
        id = _py_list.get("id").toStr();

    }

    // 更新当前列表得所有卡片信息
    updateCards => (){
        // 更新卡片列表

        local allCards;
        allCards = _py_list.get("list_cards").callMethod();

        cardList = new List();
        for( i = 0; i < allCards.size(); i++){
            card = new TrelloCard();
            card._py_card = allCards.get(i);
            card.updateSelf();
            card.list = this;

            cardList.add(card);
        }

        println("update cards over. size: " + cardList.size());
    }

    getCardById => ( id ){
      return filterCard( (card,arg) => { return card.id == arg; }, id);
    }

    getCardByName => ( name ){
      return filterCard( (card,arg) => { return card.name == arg; }, name);
    }
    
    getCardByLabel => (label){
        return null;
    }
    
    getCardByNamePrefix => (prefix){
        return filterCard( (card,arg) => { return card.name.startWith(arg); }, prefix);
    }

    newCard => ( name, description, dueDate ){
        local tmp, tmpCard;
        tmp = _py_list.get("add_card").callMethod(name, description);
        if( !tmp || tmp.isNull()){
            return null;
        }

        tmpCard = new TrelloCard();
        tmpCard._py_card = tmp;
        tmpCard.updateSelf();
        tmpCard.list = this;

        // TODO:  dueDate 

        return tmpCard;
    }

    randomCard => (){
        checkCardList();

        local size,index;
        size = cardList.size();
        if(size <= 0 ){
            return null;
        }

        r = new Random();

        index = r.nextInt(size);

        if(index < 0){
            index = 0;
        }
        if(index >= size){
            index = size - 1;
        }

        return cardList[index];
    }

    checkCardList => (){
        if( ! _init_card ){
            _init_card = true;
            updateCards();
        }
    }

    filterCard => ( filter , arg) {
        checkCardList();

        local tmp;

        for( i = 0; i < cardList.size(); i++){
            tmp = cardList.get(i);

            if( filter(tmp, arg)) {
                return tmp;
            }
        }

        return null;
    }
    
    clearList => (){
        if(cardList){
            cardList.clear();
            cardList = null;
        }
    }
    
    
    archiveCards => (){
        _py_list.get("archive_all_cards").callMethod();
        
        clearList();
    }
    
    deleteCards => (){
        if (cardList){
            local i,c;
            for (i = 0; i < cardList.size(); i++){
                c = cardList.get(i);
                if( c ){
                    c.deleteCard();
                }
            }
        }
        
        clearList();
    }
    
    archive => (){
        _py_list.get("close").callMethod();
    }
    
    reopen => (){
        _py_list.get("open").callMethod();
    }
    
    delete => (){
        // do nothing.
    }
    
    checkJumpOnce => (flag){
        local jumpCheck = getCardByName("[jump once]");
        if(jumpCheck){
            if(flag){
                jumpCheck.deleteCard();
                cardList.remove(jumpCheck);
            }
            
            println("checkJumpOnce: return true");
            return true;
        }
        
        println("checkJumpOnce: return false");
        return false;
    }    
    
    
    size => (){
        checkCardList();
    
        local s;
        s = cardList.size();
        return s; 
    }

}
