
// 对 client 类进行实现
auto TrelloClient {

    _py_hook;
    // python trello 库的引用
    _py_trello;
    // python 类 TrelloClient 的引用
    _py_client;

    // 实现 define.lx 文件的内容
    init => (){
        PythonLib::load();
        PyDateTime::init();
        _py_hook = new PythonHook();

        _py_trello = _py_hook.importModule("trello");

        if ( !_py_trello || _py_trello.isNull() ) {
        	return 102 ;
        }

        // 构造调用函数所需要的参数
        local args;
        args = _py_hook.newTuple(3);
        args.setItem(0, apiKey);
        args.setItem(1, apiSecret);
        args.setItem(2, token);

        // 获取函数， 并调用
        local pyFuncTrelloClient;
        pyFuncTrelloClient = _py_trello.get("TrelloClient");
        _py_client = pyFuncTrelloClient.callMethod(args);

        if( !_py_client || _py_client.isNull() ){
            return 103;
        }

        updateBoardList();

        // 成功加载了
        return 0 ;
    }

    // 更新 看板列表
    updateBoardList => (){
        local pyFuncList;
        pyFuncList = _py_client.get("list_boards");
        all_boards = pyFuncList.callMethod();

        // println("pyFuncList isNull: " + pyFuncList.isNull());
        // println("size: " + all_boards.size());

        boardList = new List();
        for( i = 0; i < all_boards.size(); i++){
            // 填充列表
            board = new TrelloBoard();
            board._py_board = all_boards.get(i);
            board.updateSelf();
            println("get board: " + board.name);

            boardList.add(board);
        }

    }

    // 实现函数
    getBoardByName => ( name ){
        local tmp;
        tmp = filterBoard( (tmp, arg) => { return tmp.name == arg; } , name);
        // println("getBoardByName ==" + tmp);

        return tmp;
    }

    // 实现函数
    getBoardById => ( id ) {
        return filterBoard( (tmp, arg) => { return tmp.id == arg; } , id);
    }

    // 过滤看板
    // filter:   函数， true 表示是， false: 不是
    // arg:   传来得参数， 会直接传给 filter
    filterBoard => (filter, arg) {
        local tmp;
        // 遍历列表， 检测id
        for ( i = 0; i < boardList.size(); i++ ){
            tmp = boardList.get(i);

            // println("filterBoard: "+tmp);
            if( filter(tmp, arg) ){
                // println("filterBoard return : "+tmp);
                return tmp;
            }
        }

        return null;
    }



}
