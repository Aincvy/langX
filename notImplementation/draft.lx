
// 随意得考虑一些草稿。。

////////////////////////////////////////////////////
//  __call   连续调用某个对象得一些方法  参数名指定
////////////////////////////////////////////////////

__call;

Music {

    name;
    description;
    author;
    length;

    play => (){

    }

    stop => (){

    }

    setName => (name){
        return 1;
    }

    setDescription => (descr){

    }

    setAuthor => (author) {

    }

    setLength => (length){

    }

}

checkResult => (r) {
    if(r != 0){
        println("something error: " + r );
        return true;
    }

    return false;
}

m = new Music();

/*
 * __call [object] { [method list] }
 * 依次调用某个对象得 N个方法
 * __with method()    将调用得方法得返回值传递给某个别得方法， 如果 method 没有给参数列表， 则会传递 对象方法得返回值给该方法， 同时， 可以使用$? 来手动传值| 符号 /< 可表示 __with
 * break if method()   如果method() 返回true 则中断执行链，  method 得参数传递原理同上。 $? 将会代指 !!对象方法得返回值!!!   可以考虑使用符号 /? 来表示 break if
 *
 */
__call m {

    // setName("name") __with println() break if checkResult();
    // 全部使用符号得版本是    setName("name") /> println() /? checkResult();
    // 还是字符看着舒服， 但是符号可以加快速度， 应该
    setAuthor("author");
    setDescription("aa");
    setLength(120);
}

////////////////////////////////////////////////////
//  参数名指定
////////////////////////////////////////////////////

/**
 * 测试函数
 * name:  名字
 * level: 等级
 * rank: rank
 */
testFunction => (name, level, rank, fightValue){

}


// 忽略name 参数， 自动传 null
// 指定 level = 1, 然后接着 level 之后传值
// 依次是 rank = 5, fightValue = 100
// 因为后面就没有更多得参数了， 所以 "aa" 会被直接忽略掉
testFunction(level = 1, 5, 100, "aa");


////////////////////////////////////////////////////
//  多行字符串
////////////////////////////////////////////////////

/*   下面是代码 ， 使用三个单引号括起来得字符串视为多行字符串 
 *   首个字符串 后面需要紧跟着换行符， 否则视为语法错误 
 *   内容将一直截取到  闭合符号前面，  如果闭合符号前面有内容，则会追加到字符串尾部
text = 
'''
first line.
second line.
third line.
4th ..
lastline
''' ;
*/


////////////////////////////////////////////////////
//  装饰器 之类得内容
////////////////////////////////////////////////////




////////////////////////////////////////////////////
//  反射 之类得内容
////////////////////////////////////////////////////
